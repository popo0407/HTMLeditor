# PDF CSS同期用PowerShellスクリプト
# 開発時に手動で実行するか、git フックで自動実行可能

$frontendCss = ".\frontend\src\styles\pdf.css"
$backendCss = ".\backend\templates\pdf.css"
# also update TinyMCE public CSS so editor iframe picks up changes
$publicCss = ".\frontend\public\editor-styles.css"

Write-Host "PDF CSS同期スクリプト" -ForegroundColor Cyan

# ソースファイルの確認
if (-not (Test-Path $frontendCss)) {
    Write-Host "❌ エラー: ソースファイルが見つかりません: $frontendCss" -ForegroundColor Red
    exit 1
}

# ターゲットディレクトリを作成（存在しない場合）
$backendDir = Split-Path $backendCss -Parent
if (-not (Test-Path $backendDir)) {
    New-Item -ItemType Directory -Path $backendDir -Force | Out-Null
    Write-Host "📁 ディレクトリを作成: $backendDir" -ForegroundColor Yellow
}

try {
    # CSSファイルを読み込み
    $cssContent = Get-Content $frontendCss -Raw -Encoding UTF8
    
    # ヘッダーコメント付きで書き込み
    $header = @"
/* Copied from frontend/src/styles/pdf.css at sync time
   Backend will inline this CSS into the PDF template so wkhtmltopdf
   renders the same styles as the frontend TinyMCE preview.
   
   DO NOT EDIT THIS FILE DIRECTLY - EDIT frontend/src/styles/pdf.css INSTEAD
*/
"@
    
    $updatedContent = $header + "`n" + $cssContent
    # PowerShell 5.1対応: UTF8でBOMなしで保存するため[System.IO.File]を使用
    $utf8NoBom = New-Object System.Text.UTF8Encoding $false
    [System.IO.File]::WriteAllText($backendCss, $updatedContent, $utf8NoBom)

    # public/editor-styles.css も更新（TinyMCEが参照）
    $publicDir = Split-Path $publicCss -Parent
    if (-not (Test-Path $publicDir)) {
        New-Item -ItemType Directory -Path $publicDir -Force | Out-Null
        Write-Host "📁 public ディレクトリを作成: $publicDir" -ForegroundColor Yellow
    }
    $publicHeader = @"
/* Copied from frontend/src/styles/pdf.css at sync time
   TinyMCE editor will load this CSS file to match PDF output styles.
   
   DO NOT EDIT THIS FILE DIRECTLY - EDIT frontend/src/styles/pdf.css INSTEAD
*/
"@
    $publicContent = $publicHeader + "`n" + $cssContent
    [System.IO.File]::WriteAllText($publicCss, $publicContent, $utf8NoBom)
    
    $sourceSize = (Get-Item $frontendCss).Length
    $targetSize = (Get-Item $backendCss).Length
    $publicSize = (Get-Item $publicCss).Length
    
    Write-Host "✅ PDF CSS同期完了!" -ForegroundColor Green
    Write-Host "   ソース: $frontendCss ($sourceSize bytes)" -ForegroundColor Gray
    Write-Host "   → バックエンド: $backendCss ($targetSize bytes)" -ForegroundColor Gray
    Write-Host "   → TinyMCE用: $publicCss ($publicSize bytes)" -ForegroundColor Gray
    
    # ファイルの更新時刻を確認
    $sourceTime = (Get-Item $frontendCss).LastWriteTime
    $targetTime = (Get-Item $backendCss).LastWriteTime
    $publicTime = (Get-Item $publicCss).LastWriteTime
    Write-Host "   ソース更新: $($sourceTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
    Write-Host "   バックエンド更新: $($targetTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
    Write-Host "   TinyMCE用更新: $($publicTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Gray
    
} catch {
    Write-Host "❌ 同期エラー: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
